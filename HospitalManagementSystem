import java.util.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

class Patient {
    private int patientId;
    private String name;
    private int age;
    private String gender;
    private String phoneNumber;
    private String address;
    private LocalDate admissionDate;
    private List<String> medicalHistory;

    public Patient(int patientId, String name, int age, String gender, String phoneNumber, String address) {
        this.patientId = patientId;
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.admissionDate = LocalDate.now();
        this.medicalHistory = new ArrayList<>();
    }

    public int getPatientId() { return patientId; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public int getAge() { return age; }
    public void setAge(int age) { this.age = age; }
    public String getGender() { return gender; }
    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }
    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }
    public LocalDate getAdmissionDate() { return admissionDate; }
    public List<String> getMedicalHistory() { return medicalHistory; }

    public void addMedicalRecord(String record) {
        medicalHistory.add(LocalDate.now() + ": " + record);
    }

    @Override
    public String toString() {
        return String.format("Patient ID: %d | Name: %s | Age: %d | Gender: %s | Phone: %s", 
                           patientId, name, age, gender, phoneNumber);
    }
}

class Doctor {
    private int doctorId;
    private String name;
    private String specialization;
    private String phoneNumber;
    private boolean available;
    private List<Integer> patientIds;

    public Doctor(int doctorId, String name, String specialization, String phoneNumber) {
        this.doctorId = doctorId;
        this.name = name;
        this.specialization = specialization;
        this.phoneNumber = phoneNumber;
        this.available = true;
        this.patientIds = new ArrayList<>();
    }

    public int getDoctorId() { return doctorId; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getSpecialization() { return specialization; }
    public void setSpecialization(String specialization) { this.specialization = specialization; }
    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }
    public boolean isAvailable() { return available; }
    public void setAvailable(boolean available) { this.available = available; }
    public List<Integer> getPatientIds() { return patientIds; }

    public void assignPatient(int patientId) {
        if (!patientIds.contains(patientId)) {
            patientIds.add(patientId);
        }
    }

    @Override
    public String toString() {
        return String.format("Doctor ID: %d | Name: %s | Specialization: %s | Available: %s", 
                           doctorId, name, specialization, available ? "Yes" : "No");
    }
}

class Appointment {
    private int appointmentId;
    private int patientId;
    private int doctorId;
    private LocalDateTime appointmentDateTime;
    private String status; // SCHEDULED, COMPLETED, CANCELLED
    private String notes;

    public Appointment(int appointmentId, int patientId, int doctorId, LocalDateTime appointmentDateTime) {
        this.appointmentId = appointmentId;
        this.patientId = patientId;
        this.doctorId = doctorId;
        this.appointmentDateTime = appointmentDateTime;
        this.status = "SCHEDULED";
        this.notes = "";
    }

    public int getAppointmentId() { return appointmentId; }
    public int getPatientId() { return patientId; }
    public int getDoctorId() { return doctorId; }
    public LocalDateTime getAppointmentDateTime() { return appointmentDateTime; }
    public void setAppointmentDateTime(LocalDateTime appointmentDateTime) { 
        this.appointmentDateTime = appointmentDateTime; 
    }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
    public String getNotes() { return notes; }
    public void setNotes(String notes) { this.notes = notes; }

    @Override
    public String toString() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        return String.format("Appointment ID: %d | Patient ID: %d | Doctor ID: %d | Date: %s | Status: %s", 
                           appointmentId, patientId, doctorId, appointmentDateTime.format(formatter), status);
    }
}

public class HospitalManagementSystem {
    private Map<Integer, Patient> patients;
    private Map<Integer, Doctor> doctors;
    private Map<Integer, Appointment> appointments;
    private Scanner scanner;
    private int nextPatientId = 1;
    private int nextDoctorId = 1;
    private int nextAppointmentId = 1;

    public HospitalManagementSystem() {
        patients = new HashMap<>();
        doctors = new HashMap<>();
        appointments = new HashMap<>();
        scanner = new Scanner(System.in);
        initializeSampleData();
    }

    private void initializeSampleData() {

        addDoctor("Dr. Smith", "Cardiology", "555-0101");
        addDoctor("Dr. Johnson", "Neurology", "555-0102");
        addDoctor("Dr. Williams", "Pediatrics", "555-0103");
        
        addPatient("John Doe", 35, "Male", "555-1001", "123 Main St");
        addPatient("Jane Smith", 28, "Female", "555-1002", "456 Oak Ave");
    }

    public void addPatient(String name, int age, String gender, String phoneNumber, String address) {
        Patient patient = new Patient(nextPatientId++, name, age, gender, phoneNumber, address);
        patients.put(patient.getPatientId(), patient);
        System.out.println("Patient added successfully with ID: " + patient.getPatientId());
    }

    public void viewAllPatients() {
        if (patients.isEmpty()) {
            System.out.println("No patients found.");
            return;
        }
        System.out.println("\n=== ALL PATIENTS ===");
        for (Patient patient : patients.values()) {
            System.out.println(patient);
        }
    }

    public void searchPatient(int patientId) {
        Patient patient = patients.get(patientId);
        if (patient != null) {
            System.out.println("\n=== PATIENT DETAILS ===");
            System.out.println(patient);
            System.out.println("Address: " + patient.getAddress());
            System.out.println("Admission Date: " + patient.getAdmissionDate());
            System.out.println("Medical History:");
            for (String record : patient.getMedicalHistory()) {
                System.out.println("  - " + record);
            }
        } else {
            System.out.println("Patient not found with ID: " + patientId);
        }
    }

    public void addDoctor(String name, String specialization, String phoneNumber) {
        Doctor doctor = new Doctor(nextDoctorId++, name, specialization, phoneNumber);
        doctors.put(doctor.getDoctorId(), doctor);
        System.out.println("Doctor added successfully with ID: " + doctor.getDoctorId());
    }

    public void viewAllDoctors() {
        if (doctors.isEmpty()) {
            System.out.println("No doctors found.");
            return;
        }
        System.out.println("\n=== ALL DOCTORS ===");
        for (Doctor doctor : doctors.values()) {
            System.out.println(doctor);
        }
    }

    public void searchDoctor(int doctorId) {
        Doctor doctor = doctors.get(doctorId);
        if (doctor != null) {
            System.out.println("\n=== DOCTOR DETAILS ===");
            System.out.println(doctor);
            System.out.println("Phone: " + doctor.getPhoneNumber());
            System.out.println("Assigned Patients: " + doctor.getPatientIds().size());
        } else {
            System.out.println("Doctor not found with ID: " + doctorId);
        }
    }

    public void scheduleAppointment(int patientId, int doctorId, String dateTimeStr) {
        if (!patients.containsKey(patientId)) {
            System.out.println("Patient not found with ID: " + patientId);
            return;
        }
        if (!doctors.containsKey(doctorId)) {
            System.out.println("Doctor not found with ID: " + doctorId);
            return;
        }

        try {
            LocalDateTime appointmentDateTime = LocalDateTime.parse(dateTimeStr, 
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
            
            Appointment appointment = new Appointment(nextAppointmentId++, patientId, doctorId, appointmentDateTime);
            appointments.put(appointment.getAppointmentId(), appointment);
            
            doctors.get(doctorId).assignPatient(patientId);
            
            System.out.println("Appointment scheduled successfully with ID: " + appointment.getAppointmentId());
        } catch (Exception e) {
            System.out.println("Invalid date format. Please use yyyy-MM-dd HH:mm");
        }
    }

    public void viewAllAppointments() {
        if (appointments.isEmpty()) {
            System.out.println("No appointments found.");
            return;
        }
        System.out.println("\n=== ALL APPOINTMENTS ===");
        for (Appointment appointment : appointments.values()) {
            System.out.println(appointment);
        }
    }

    public void updateAppointmentStatus(int appointmentId, String status) {
        Appointment appointment = appointments.get(appointmentId);
        if (appointment != null) {
            appointment.setStatus(status.toUpperCase());
            System.out.println("Appointment status updated successfully.");
        } else {
            System.out.println("Appointment not found with ID: " + appointmentId);
        }
    }

    public void addMedicalRecord(int patientId, String record) {
        Patient patient = patients.get(patientId);
        if (patient != null) {
            patient.addMedicalRecord(record);
            System.out.println("Medical record added successfully.");
        } else {
            System.out.println("Patient not found with ID: " + patientId);
        }
    }

    public void displayMenu() {
        System.out.println("\n=== HOSPITAL MANAGEMENT SYSTEM ===");
        System.out.println("1. Patient Management");
        System.out.println("2. Doctor Management");
        System.out.println("3. Appointment Management");
        System.out.println("4. Medical Records");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    public void patientMenu() {
        while (true) {
            System.out.println("\n=== PATIENT MANAGEMENT ===");
            System.out.println("1. Add Patient");
            System.out.println("2. View All Patients");
            System.out.println("3. Search Patient");
            System.out.println("4. Back to Main Menu");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice) {
                case 1:
                    System.out.print("Enter patient name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter age: ");
                    int age = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter gender: ");
                    String gender = scanner.nextLine();
                    System.out.print("Enter phone number: ");
                    String phone = scanner.nextLine();
                    System.out.print("Enter address: ");
                    String address = scanner.nextLine();
                    addPatient(name, age, gender, phone, address);
                    break;
                case 2:
                    viewAllPatients();
                    break;
                case 3:
                    System.out.print("Enter patient ID: ");
                    int patientId = scanner.nextInt();
                    searchPatient(patientId);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    public void doctorMenu() {
        while (true) {
            System.out.println("\n=== DOCTOR MANAGEMENT ===");
            System.out.println("1. Add Doctor");
            System.out.println("2. View All Doctors");
            System.out.println("3. Search Doctor");
            System.out.println("4. Back to Main Menu");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter doctor name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter specialization: ");
                    String specialization = scanner.nextLine();
                    System.out.print("Enter phone number: ");
                    String phone = scanner.nextLine();
                    addDoctor(name, specialization, phone);
                    break;
                case 2:
                    viewAllDoctors();
                    break;
                case 3:
                    System.out.print("Enter doctor ID: ");
                    int doctorId = scanner.nextInt();
                    searchDoctor(doctorId);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    public void appointmentMenu() {
        while (true) {
            System.out.println("\n=== APPOINTMENT MANAGEMENT ===");
            System.out.println("1. Schedule Appointment");
            System.out.println("2. View All Appointments");
            System.out.println("3. Update Appointment Status");
            System.out.println("4. Back to Main Menu");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter patient ID: ");
                    int patientId = scanner.nextInt();
                    System.out.print("Enter doctor ID: ");
                    int doctorId = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter appointment date and time (yyyy-MM-dd HH:mm): ");
                    String dateTime = scanner.nextLine();
                    scheduleAppointment(patientId, doctorId, dateTime);
                    break;
                case 2:
                    viewAllAppointments();
                    break;
                case 3:
                    System.out.print("Enter appointment ID: ");
                    int appointmentId = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter new status (SCHEDULED/COMPLETED/CANCELLED): ");
                    String status = scanner.nextLine();
                    updateAppointmentStatus(appointmentId, status);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    public void medicalRecordsMenu() {
        while (true) {
            System.out.println("\n=== MEDICAL RECORDS ===");
            System.out.println("1. Add Medical Record");
            System.out.println("2. View Patient Medical History");
            System.out.println("3. Back to Main Menu");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter patient ID: ");
                    int patientId = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter medical record: ");
                    String record = scanner.nextLine();
                    addMedicalRecord(patientId, record);
                    break;
                case 2:
                    System.out.print("Enter patient ID: ");
                    int searchId = scanner.nextInt();
                    searchPatient(searchId);
                    break;
                case 3:
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    public void run() {
        System.out.println("Welcome to Hospital Management System!");
        
        while (true) {
            displayMenu();
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    patientMenu();
                    break;
                case 2:
                    doctorMenu();
                    break;
                case 3:
                    appointmentMenu();
                    break;
                case 4:
                    medicalRecordsMenu();
                    break;
                case 5:
                    System.out.println("Thank you for using Hospital Management System!");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    public static void main(String[] args) {
        HospitalManagementSystem hms = new HospitalManagementSystem();
        hms.run();
    }
}
